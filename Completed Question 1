# ==========
# Q1
class OrfFinder:
    def __init__(self, genome):
        """
        Written By: Kayla Zevanya (32810806)

        Function Description:
        The function is to initialize the OrFinder where the genome single non-empty string is passed as an argument to be processed to store all the possible start (or prefix) and
        end (or suffix) of substrings from the given genome. As the assingment specification also mentions that the start as a prefix and end as a suffix are a single non-empty strings
        that contains all the substrings of genome.

        Approach Description:
        The function will also be explained in more detailed description alongside with the code written by myself. The function takes genome as an argument, as requested in the assignment
        specification, to be preprocessed to firstly check the possible substrings in the genome which later on the starting and ending positions of the substrings is stored in a list of start_prefix 
        and end_suffix for each starting position and the ending position. 

        Input:
            genome: The input is genome in the form of a single non-empty string that can only consist of uppercase 'A' to 'D'

        Output:
            None

        Time Complexity:
            Best case time complexity: O(N^2)
            Best case analysis: The time complexity will be O(N^2) where N is the length of the genome string.

        Space complexity: 
            Worst case time complexity: O(N^2)
            Worst case analysis: The space complexity will be O(N^2) because within the function will require space to store the start and end positions of the substrings of genome.
        """
        # Initialization of the genome string
        self.genome = genome

        # List of the possible starting position (or prefix) of the substring of genome
        self.start_prefix = []

        # List of the possible ending position (or suffix) of the substring of genome
        self.end_suffix = []

        # Define N as the length of genome
        N = len(self.genome)

        # Create a list to store all the possible values of the start (or prefix) and end (or suffix) positions
        list = []

        # Filling the list to contain all the possible start (or prefix) and possible end (or suffix) positions
        for l in range(N): # Iterate through to length of genome to fill in all possible start and end positions

            # Iterating through the range of l + 1 and N + 1
            for i in range(l + 1, N + 1):

                # If the current start_prefix is lesser, then append the empty list to the start_prefix
                if len(self.start_prefix) <= (i - 1): # Checking if there is space in start position to store the value in index i - 1

                    # Adding/appending the empty list into the start_prefix 
                    self.start_prefix.append(list)

                # If the current start_prefix has space, add/append l
                else:

                    # Adding/appending the value in index l into the list index i - 1 of the start_prefix
                    self.start_prefix[i - 1].append(l)

                # If the current end_suffix is lesser, then append the empty list to the end_suffix
                if len(self.end_suffix) <= l: # Checking if there is space in end position to store the value in index l
                    
                    # Adding/appending the empty list into the end_suffix
                    self.end_suffix.append(list)

                # If the current start_prefix has space, add/append i - 1
                else:

                    # Adding/appending the value in index i - 1 into the list index l of the end_suffix
                    self.end_suffix[l].append(i - 1)


    def find(self, start, end):
        """
         Written By: Kayla Zevanya (32810806)

        Function Description:
        The function is to return a list of all the substrings in the given genome with a particular 'start' sequences as a prefix and 'end' sequences as a suffix without any particular order
        and without overlap.

        Approach Description:
        The function will also be explained in more detailed description alongside with the code written by myself. The function approaches by creating a list start_index and end_index each to store all 
        the starting indices and ending indices for the start and sequences which later on will be filled in with values in a specific index of the substring from the genome. After obtaining all the 
        possible substrings for start and end, the function will then check if there are any same index within the both list to ensure that there are no duplicates as the assignment specification mentioned 
        that there are no particular order for the strings but start and end must not overlap.

        Input:
            start: The first input is start in the form of a single non-empty string that can only consist of uppercase 'A' to 'D'
            end: The second input is end in the form of a single non-empty string that can only consist of uppercase 'A' to 'D'

        Output:
            The output will return mysubstrings in the form of a list of strings that contains a string of 'start' and 'end' without overlap

        Time Complexity:
            Best case time complexity: O(T + U + V)
            Best case analysis: The time complexity will be O(T + U + V) where T is the length of the string 'start', U is the length of the string 'end', and V is the number of characters in the output list.

        Space complexity: 
            Worst case time complexity: O(N^2)
            Worst case analysis: The space complexity will be O(V) because the space is dependent on the number of characters in the mysubstrings list.
        """
        # Create a list to store all the results substrings of genome 
        mysubstrings = []

        # Define start_seq as the length of start (or prefix) sequence
        start_seq = len(start)

        # Define end_seq as the length of end (or suffix) sequence
        end_seq = len(end)

        # Define N as the length of genome
        N = len(self.genome)

        # Create a list to store all the starting indices for the start (or prefix) sequence
        start_index = []

        # Create a list to store all the ending indices for the end (or suffix) sequence
        end_index = []

        # Iterating through the range of N - start_seq + 1
        for _ in range(N - start_seq + 1): # Iterating to find all the possible start (or prefix) sequences

            # If the substring from _ to _ + start_seq is equals to the start (or prefix) sequences, then append/add the start index
            if self.genome[_ : _ + start_seq] == start:

                # Adding/appending the value in index _ to start_index list
                start_index.append(_)

        # Iterating through the range of end_seq - 1 and N
        for _ in range(end_seq - 1, N): # Iterating to find all the possible end (or suffix) sequences

            # If the substring from _ - end_seq + 1 to _ + 1 is equal to end (or suffix) sequences, then append/add the end index
            if self.genome[_ - end_seq + 1 : _ + 1] == end:

                # Adding/appending the value in index _ to the end_index list
                end_index.append(_)
            
        # Iterating through the range of start (or prefix) and end (or suffix) to find the final substrings
        for s in range(start_index): # Iterating s through the range of all the start sequences

            # Iterating e through the range of all the end sequences
            for e in range(end_index):

                # If the start (or prefix) index is lesser than the end (or suffix) index, and e - s + 1 is greater or equals to start_seq + end_seq then append/add the final substrings
                if s < e and (e - s + 1 >= start_seq + end_seq): # Checking if the start index is lesser than the end index, and there are no substrings that overlap/duplicate

                    # Appending/adding the value in index s to e + 1
                    mysubstrings.append(self.genome[s:e + 1]) # Append/add all the acceptable substrings

        # Return a list of the final substrings 
        return mysubstrings
